/**
 * M√©todo alternativo simples para downloads do YouTube
 * Usa configura√ß√µes m√≠nimas que funcionam consistentemente
 */

import { spawn } from "child_process";
import * as path from "path";
import * as fs from "fs";
import { fileURLToPath } from "url";

/**
 * Helper para adicionar cookies se existir
 */
function addCookiesIfAvailable(args: string[]): boolean {
  // Para compatibilidade com ES modules, usar import.meta.url se dispon√≠vel
  let currentDir = process.cwd();
  try {
    // Em ES modules, __dirname n√£o existe, ent√£o criamos um equivalente
    if (typeof __dirname === 'undefined') {
      currentDir = process.cwd();
    } else {
      currentDir = __dirname;
    }
  } catch {
    currentDir = process.cwd();
  }

  const cookiesPaths = [
    "src/cookies/cookies.txt",
    "./src/cookies/cookies.txt", 
    path.join(process.cwd(), "src", "cookies", "cookies.txt"),
    path.join(currentDir, "..", "..", "cookies", "cookies.txt"),
    path.join(process.cwd(), "dist", "..", "src", "cookies", "cookies.txt")
  ];
  
  for (const cookiesPath of cookiesPaths) {
    if (fs.existsSync(cookiesPath)) {
      // Verificar se o arquivo n√£o est√° vazio e tem conte√∫do v√°lido
      try {
        const content = fs.readFileSync(cookiesPath, 'utf-8');
        const lines = content.split('\n').filter(line => line.trim() && !line.startsWith('#'));
        
        if (lines.length > 0) {
          args.push("--cookies", cookiesPath);
          console.log(`‚úÖ Usando cookies: ${cookiesPath} (${lines.length} cookies v√°lidos)`);
          
          // Verificar se h√° cookies do YouTube especificamente
          const youtubeCookies = lines.filter(line => line.includes('youtube.com') || line.includes('.youtube.com'));
          if (youtubeCookies.length > 0) {
            console.log(`üì∫ Encontrados ${youtubeCookies.length} cookies do YouTube`);
          } else {
            console.log(`‚ö†Ô∏è Nenhum cookie espec√≠fico do YouTube encontrado`);
          }
          
          return true;
        } else {
          console.log(`‚ö†Ô∏è Cookies encontrado mas vazio: ${cookiesPath}`);
        }
      } catch (err) {
        console.log(`‚ùå Erro ao ler cookies: ${cookiesPath}`, err);
      }
    }
  }
  
  console.log("‚ö†Ô∏è Nenhum cookies.txt v√°lido encontrado nos caminhos:", cookiesPaths);
  console.log("üìÅ Diret√≥rio atual:", process.cwd());
  console.log("üìÅ currentDir:", currentDir);
  return false;
}

export interface SimpleYtDlpOptions {
  url: string;
  outputPath?: string;
  format?: 'mp3' | 'mp4';
  quality?: string;
}

/**
 * Download com estrat√©gias anti-detec√ß√£o progressivas
 */
export async function simpleYtDlpDownload(options: SimpleYtDlpOptions): Promise<string> {
  const { url, outputPath, format = 'mp3', quality = '0' } = options;

  // Estrat√©gia 1: M√©todo b√°sico
  let args = [
    "--no-warnings",
    "--no-check-certificate",
    "--prefer-insecure"
  ];

  // Usar cookies.txt se existir
  addCookiesIfAvailable(args);
  
  if (format === 'mp3') {
    args.push("--extract-audio", "--audio-format", "mp3", "--audio-quality", quality);
  }
  
  if (outputPath) {
    args.push("--output", outputPath);
  }
  
  args.push(url);

  console.log('üéØ Download - Tentativa 1 (b√°sico):', args);

  try {
    return await executeYtDlpDownload(args);
  } catch (error: any) {
    console.log('‚ùå Download b√°sico falhou, usando anti-detec√ß√£o...');
    
    // Estrat√©gia 2: Anti-detec√ß√£o
    args = [
      "--no-warnings",
      "--no-check-certificate", 
      // User-Agent atual do Chrome
      "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
      // Headers completos de navegador real
      "--add-header", "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8",
      "--add-header", "Accept-Language:pt-BR,pt;q=0.9,en;q=0.8",
      "--add-header", "sec-ch-ua:\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
      "--add-header", "sec-ch-ua-mobile:?0",
      "--add-header", "sec-ch-ua-platform:\"Windows\"",
      "--extractor-retries", "3",
      "--sleep-interval", "2"
    ];
    
    // Usar cookies tamb√©m na segunda tentativa
    addCookiesIfAvailable(args);
    
    if (format === 'mp3') {
      args.push("--extract-audio", "--audio-format", "mp3", "--audio-quality", quality);
    }
    
    if (outputPath) {
      args.push("--output", outputPath);
    }
    
    args.push(url);

    console.log('üõ°Ô∏è Download - Tentativa 2 (anti-detec√ß√£o):', args);
    return await executeYtDlpDownload(args);
  }
}

/**
 * Fun√ß√£o helper para executar download
 */
function executeYtDlpDownload(args: string[]): Promise<string> {
  return new Promise((resolve, reject) => {
    const process = spawn("yt-dlp", args, {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: false
    });

    let stdout = "";
    let stderr = "";

    process.stdout.on("data", (data) => {
      stdout += data.toString();
    });

    process.stderr.on("data", (data) => {
      stderr += data.toString();
    });

    process.on("close", (code) => {
      if (code === 0) {
        resolve(stdout);
      } else {
        reject(new Error(`yt-dlp download falhou (c√≥digo ${code}): ${stderr}`));
      }
    });

    process.on("error", (error) => {
      reject(new Error(`Erro no download: ${error.message}`));
    });
  });
}

/**
 * Obter informa√ß√µes do v√≠deo com estrat√©gias anti-detec√ß√£o para servidores
 */
export async function simpleYtDlpInfo(url: string): Promise<any> {
  // Estrat√©gia 1: M√©todo b√°sico (funciona localmente)
  let args = [
    "--dump-json",
    "--no-warnings", 
    "--no-check-certificate"
  ];
  
  // Adicionar cookies se dispon√≠vel
  addCookiesIfAvailable(args);
  args.push(url);

  console.log('üéØ Tentativa 1 - M√©todo b√°sico:', args);

  try {
    return await executeYtDlp(args);
  } catch (error: any) {
    console.log('‚ùå M√©todo b√°sico falhou, tentando anti-detec√ß√£o avan√ßada...');
    
    // Estrat√©gia 2: Anti-detec√ß√£o para servidores
    args = [
      "--dump-json",
      "--no-warnings",
      "--no-check-certificate", 
      "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
      "--add-header", "Accept-Language:en-US,en;q=0.9",
      "--add-header", "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8",
      "--extractor-retries", "3",
      "--sleep-interval", "2", 
      "--max-sleep-interval", "5"
    ];
    
    // Adicionar cookies se dispon√≠vel  
    addCookiesIfAvailable(args);
    args.push(url);

    console.log('üõ°Ô∏è Tentativa 2 - Anti-detec√ß√£o:', args);
    
    try {
      return await executeYtDlp(args);
    } catch (error2: any) {
      console.log('‚ùå Anti-detec√ß√£o falhou, tentando m√©todo com proxy/VPN simulation...');
      
      // Estrat√©gia 3: Simular diferentes origens
      args = [
        "--dump-json", 
        "--no-warnings",
        "--no-check-certificate",
        "--user-agent", "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.1 Safari/605.1.15",
        "--add-header", "Accept-Language:pt-BR,pt;q=0.9,en;q=0.8",
        "--add-header", "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
        "--add-header", "Cache-Control:no-cache",
        "--extractor-retries", "5",
        "--sleep-interval", "3",
        "--max-sleep-interval", "8", 
        "--geo-bypass"
      ];
      
      // Adicionar cookies se dispon√≠vel
      addCookiesIfAvailable(args);
      args.push(url);

      console.log('üåç Tentativa 3 - Simula√ß√£o geogr√°fica:', args);
      
      try {
        return await executeYtDlp(args);
      } catch (error3: any) {
        console.log('‚ùå Simula√ß√£o geogr√°fica falhou, tentando sem cookies como √∫ltimo recurso...');
        
      // Estrat√©gia 4: Sem cookies, m√°xima agressividade anti-detec√ß√£o
      args = [
        "--dump-json", 
        "--no-warnings",
        "--no-check-certificate",
        // User-Agent atual do Chrome (atualizar periodicamente)
        "--user-agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
        // Headers exatos de um navegador real
        "--add-header", "Accept:text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8",
        "--add-header", "Accept-Language:pt-BR,pt;q=0.9,en;q=0.8",
        "--add-header", "Accept-Encoding:gzip, deflate, br",
        "--add-header", "Cache-Control:no-cache",
        "--add-header", "Pragma:no-cache",
        "--add-header", "sec-ch-ua:\"Google Chrome\";v=\"131\", \"Chromium\";v=\"131\", \"Not_A Brand\";v=\"24\"",
        "--add-header", "sec-ch-ua-mobile:?0", 
        "--add-header", "sec-ch-ua-platform:\"Windows\"",
        "--add-header", "Sec-Fetch-Dest:document",
        "--add-header", "Sec-Fetch-Mode:navigate",
        "--add-header", "Sec-Fetch-Site:none",
        "--add-header", "Sec-Fetch-User:?1",
        "--add-header", "Upgrade-Insecure-Requests:1",
        // Par√¢metros de retry mais agressivos
        "--extractor-retries", "10",
        "--sleep-interval", "5",
        "--max-sleep-interval", "15", 
        "--geo-bypass",
        "--force-ipv4",
        // Tentar usar fonte de endere√ßo diferente se poss√≠vel
        ...(process.env.SOURCE_IP ? ["--source-address", process.env.SOURCE_IP] : []),
        url
      ];

      console.log('üîì Tentativa 4 - Sem cookies (modo p√∫blico):', args);
      
      try {
        return await executeYtDlp(args);
      } catch (error4: any) {
        console.log('‚ùå Todas as tentativas falharam.');
        console.log('üö® DIAGN√ìSTICO: YouTube est√° bloqueando IPs de data center (Railway)');
        console.log('üí° SOLU√á√ïES: 1) Usar proxy, 2) Usar YouTube API, 3) Tentar cookies mais frescos');
        
        // Re-throw o √∫ltimo erro mais informativo
        throw new Error(`yt-dlp falhou ap√≥s 4 tentativas. √öltimo erro: ${error4.message}. CAUSA: IP do Railway √© detectado como bot pelo YouTube. SOLU√á√ïES: usar proxy ou YouTube API.`);
      }
    }
  }
}

/**
 * Fun√ß√£o helper para executar yt-dlp
 */
function executeYtDlp(args: string[]): Promise<any> {
  return new Promise((resolve, reject) => {
    const process = spawn("yt-dlp", args, {
      stdio: ['pipe', 'pipe', 'pipe'],
      shell: false
    });

    let stdout = "";
    let stderr = "";

    process.stdout.on("data", (data) => {
      stdout += data.toString();
    });

    process.stderr.on("data", (data) => {
      stderr += data.toString();
    });

    process.on("close", (code) => {
      if (code === 0) {
        try {
          const info = JSON.parse(stdout);
          resolve(info);
        } catch (e) {
          reject(new Error("Falha ao parsear informa√ß√µes do v√≠deo"));
        }
      } else {
        reject(new Error(`yt-dlp falhou (c√≥digo ${code}): ${stderr}`));
      }
    });

    process.on("error", (error) => {
      reject(new Error(`Erro ao executar yt-dlp: ${error.message}`));
    });
  });
}